package mcir

import (
	"encoding/json"
	"fmt"
	"os"
	"sort"
	"strconv"
	"strings"

	//"strings"

	"github.com/cloud-barista/cb-spider/interface/api"
	"github.com/cloud-barista/poc-cicd-tumblebug/src/core/common"
	"github.com/go-resty/resty/v2"

	//"github.com/cloud-barista/poc-cicd-tumblebug/src/core/mcis"

	_ "github.com/go-sql-driver/mysql"
)

type SpiderSpecInfo struct { // Spider
	// https://github.com/cloud-barista/cb-spider/blob/master/cloud-control-manager/cloud-driver/interfaces/resources/VMSpecHandler.go

	Region string
	Name   string
	VCpu   SpiderVCpuInfo
	Mem    string
	Gpu    []SpiderGpuInfo

	KeyValueList []common.KeyValue
}

type SpiderVCpuInfo struct { // Spider
	Count string
	Clock string // GHz
}

type SpiderGpuInfo struct { // Spider
	Count string
	Mfr   string
	Model string
	Mem   string
}

type TbSpecReq struct { // Tumblebug
	Name           string `json:"name"`
	ConnectionName string `json:"connectionName"`
	CspSpecName    string `json:"cspSpecName"`
	Description    string `json:"description"`
}

type TbSpecInfo struct { // Tumblebug
	Namespace             string   `json:"namespace"` // required to save in RDB
	Id                    string   `json:"id"`
	Name                  string   `json:"name"`
	ConnectionName        string   `json:"connectionName"`
	CspSpecName           string   `json:"cspSpecName"`
	Os_type               string   `json:"os_type"`
	Num_vCPU              uint16   `json:"num_vCPU"`
	Num_core              uint16   `json:"num_core"`
	Mem_GiB               uint16   `json:"mem_GiB"`
	Storage_GiB           uint32   `json:"storage_GiB"`
	Description           string   `json:"description"`
	Cost_per_hour         float32  `json:"cost_per_hour"`
	Num_storage           uint8    `json:"num_storage"`
	Max_num_storage       uint8    `json:"max_num_storage"`
	Max_total_storage_TiB uint16   `json:"max_total_storage_TiB"`
	Net_bw_Gbps           uint16   `json:"net_bw_Gbps"`
	Ebs_bw_Mbps           uint32   `json:"ebs_bw_Mbps"`
	Gpu_model             string   `json:"gpu_model"`
	Num_gpu               uint8    `json:"num_gpu"`
	Gpumem_GiB            uint16   `json:"gpumem_GiB"`
	Gpu_p2p               string   `json:"gpu_p2p"`
	OrderInFilteredResult uint16   `json:"orderInFilteredResult"`
	EvaluationStatus      string   `json:"evaluationStatus"`
	EvaluationScore_01    float32  `json:"evaluationScore_01"`
	EvaluationScore_02    float32  `json:"evaluationScore_02"`
	EvaluationScore_03    float32  `json:"evaluationScore_03"`
	EvaluationScore_04    float32  `json:"evaluationScore_04"`
	EvaluationScore_05    float32  `json:"evaluationScore_05"`
	EvaluationScore_06    float32  `json:"evaluationScore_06"`
	EvaluationScore_07    float32  `json:"evaluationScore_07"`
	EvaluationScore_08    float32  `json:"evaluationScore_08"`
	EvaluationScore_09    float32  `json:"evaluationScore_09"`
	EvaluationScore_10    float32  `json:"evaluationScore_10"`
	AssociatedObjectList  []string `json:"associatedObjectList"`
	IsAutoGenerated       bool     `json:"isAutoGenerated"`
}

// ConvertSpiderSpecToTumblebugSpec accepts an Spider spec object, converts to and returns an TB spec object
func ConvertSpiderSpecToTumblebugSpec(spiderSpec SpiderSpecInfo) (TbSpecInfo, error) {
	if spiderSpec.Name == "" {
		err := fmt.Errorf("ConvertSpiderSpecToTumblebugSpec failed; spiderSpec.Name == \"\" ")
		emptyTumblebugSpec := TbSpecInfo{}
		return emptyTumblebugSpec, err
	}

	tumblebugSpec := TbSpecInfo{}

	tumblebugSpec.Name = spiderSpec.Name
	tumblebugSpec.CspSpecName = spiderSpec.Name
	tempUint64, _ := strconv.ParseUint(spiderSpec.VCpu.Count, 10, 16)
	tumblebugSpec.Num_vCPU = uint16(tempUint64)
	tempFloat64, _ := strconv.ParseFloat(spiderSpec.Mem, 32)
	tumblebugSpec.Mem_GiB = uint16(tempFloat64 / 1024) //fmt.Sprintf("%.0f", tempFloat64/1024)

	return tumblebugSpec, nil
}

type SpiderSpecList struct {
	Vmspec []SpiderSpecInfo `json:"vmspec"`
}

// LookupSpecList accepts Spider conn config,
// lookups and returns the list of all specs in the region of conn config
// in the form of the list of Spider spec objects
func LookupSpecList(connConfig string) (SpiderSpecList, error) {

	if connConfig == "" {
		content := SpiderSpecList{}
		err := fmt.Errorf("LookupSpec() called with empty connConfig.")
		common.CBLog.Error(err)
		return content, err
	}

	if os.Getenv("SPIDER_CALL_METHOD") == "REST" {

		url := common.SPIDER_REST_URL + "/vmspec"

		// Create Req body
		tempReq := common.SpiderConnectionName{}
		tempReq.ConnectionName = connConfig

		client := resty.New().SetCloseConnection(true)
		client.SetAllowGetMethodPayload(true)

		resp, err := client.R().
			SetHeader("Content-Type", "application/json").
			SetBody(tempReq).
			SetResult(&SpiderSpecList{}). // or SetResult(AuthSuccess{}).
			//SetError(&AuthError{}).       // or SetError(AuthError{}).
			Get(url)

		if err != nil {
			common.CBLog.Error(err)
			content := SpiderSpecList{}
			err := fmt.Errorf("an error occurred while requesting to CB-Spider")
			return content, err
		}

		fmt.Println(string(resp.Body()))

		fmt.Println("HTTP Status code: " + strconv.Itoa(resp.StatusCode()))
		switch {
		case resp.StatusCode() >= 400 || resp.StatusCode() < 200:
			err := fmt.Errorf(string(resp.Body()))
			common.CBLog.Error(err)
			content := SpiderSpecList{}
			return content, err
		}

		temp := resp.Result().(*SpiderSpecList)
		return *temp, nil

	} else {

		// CCM API 설정
		ccm := api.NewCloudResourceHandler()
		err := ccm.SetConfigPath(os.Getenv("CBTUMBLEBUG_ROOT") + "/conf/grpc_conf.yaml")
		if err != nil {
			common.CBLog.Error("ccm failed to set config : ", err)
			return SpiderSpecList{}, err
		}
		err = ccm.Open()
		if err != nil {
			common.CBLog.Error("ccm api open failed : ", err)
			return SpiderSpecList{}, err
		}
		defer ccm.Close()

		result, err := ccm.ListVMSpecByParam(connConfig)
		if err != nil {
			common.CBLog.Error(err)
			return SpiderSpecList{}, err
		}

		temp := SpiderSpecList{}
		err = json.Unmarshal([]byte(result), &temp)
		if err != nil {
			common.CBLog.Error(err)
			return SpiderSpecList{}, err
		}
		return temp, nil

	}
}

// LookupSpec accepts Spider conn config and CSP spec name, lookups and returns the Spider spec object
func LookupSpec(connConfig string, specName string) (SpiderSpecInfo, error) {

	if connConfig == "" {
		content := SpiderSpecInfo{}
		err := fmt.Errorf("LookupSpec() called with empty connConfig.")
		common.CBLog.Error(err)
		return content, err
	} else if specName == "" {
		content := SpiderSpecInfo{}
		err := fmt.Errorf("LookupSpec() called with empty specName.")
		common.CBLog.Error(err)
		return content, err
	}

	if os.Getenv("SPIDER_CALL_METHOD") == "REST" {

		//url := common.SPIDER_REST_URL + "/vmspec/" + u.CspSpecName
		url := common.SPIDER_REST_URL + "/vmspec/" + specName

		// Create Req body
		tempReq := common.SpiderConnectionName{}
		tempReq.ConnectionName = connConfig

		client := resty.New().SetCloseConnection(true)
		client.SetAllowGetMethodPayload(true)

		resp, err := client.R().
			SetHeader("Content-Type", "application/json").
			SetBody(tempReq).
			SetResult(&SpiderSpecInfo{}). // or SetResult(AuthSuccess{}).
			//SetError(&AuthError{}).       // or SetError(AuthError{}).
			Get(url)

		if err != nil {
			common.CBLog.Error(err)
			content := SpiderSpecInfo{}
			err := fmt.Errorf("an error occurred while requesting to CB-Spider")
			return content, err
		}

		fmt.Println(string(resp.Body()))

		fmt.Println("HTTP Status code: " + strconv.Itoa(resp.StatusCode()))
		switch {
		case resp.StatusCode() >= 400 || resp.StatusCode() < 200:
			err := fmt.Errorf(string(resp.Body()))
			common.CBLog.Error(err)
			content := SpiderSpecInfo{}
			return content, err
		}

		temp := resp.Result().(*SpiderSpecInfo)
		return *temp, nil

	} else {

		// CCM API 설정
		ccm := api.NewCloudResourceHandler()
		err := ccm.SetConfigPath(os.Getenv("CBTUMBLEBUG_ROOT") + "/conf/grpc_conf.yaml")
		if err != nil {
			common.CBLog.Error("ccm failed to set config : ", err)
			return SpiderSpecInfo{}, err
		}
		err = ccm.Open()
		if err != nil {
			common.CBLog.Error("ccm api open failed : ", err)
			return SpiderSpecInfo{}, err
		}
		defer ccm.Close()

		result, err := ccm.GetVMSpecByParam(connConfig, specName)
		if err != nil {
			common.CBLog.Error(err)
			return SpiderSpecInfo{}, err
		}

		temp := SpiderSpecInfo{}
		err2 := json.Unmarshal([]byte(result), &temp)
		if err2 != nil {
			fmt.Errorf("an error occurred while unmarshaling: " + err2.Error())
		}
		return temp, nil

	}
}

func RefineSpecName(specName string) string {
	out := strings.ToLower(specName)
	out = strings.ReplaceAll(out, ".", "-")
	out = strings.ReplaceAll(out, "_", "-")

	return out
}

// FetchSpecsForConnConfig lookups all specs for region of conn config, and saves into TB spec objects
func FetchSpecsForConnConfig(connConfig string, nsId string) (specCount uint, err error) {
	fmt.Println("FetchSpecsForConnConfig(" + connConfig + ")")

	spiderSpecList, err := LookupSpecList(connConfig)
	if err != nil {
		common.CBLog.Error(err)
		return 0, err
	}

	for _, spiderSpec := range spiderSpecList.Vmspec {
		tumblebugSpec, err := ConvertSpiderSpecToTumblebugSpec(spiderSpec)
		if err != nil {
			common.CBLog.Error(err)
			return 0, err
		}

		tumblebugSpecId := connConfig + "-" + RefineSpecName(tumblebugSpec.Name)
		//fmt.Println("tumblebugSpecId: " + tumblebugSpecId) // for debug

		check, err := CheckResource(nsId, common.StrSpec, tumblebugSpecId)
		if check {
			common.CBLog.Infoln("The spec " + tumblebugSpecId + " already exists in TB; continue")
			continue
		} else if err != nil {
			common.CBLog.Infoln("Cannot check the existence of " + tumblebugSpecId + " in TB; continue")
			continue
		} else {
			tumblebugSpec.Name = tumblebugSpecId
			tumblebugSpec.ConnectionName = connConfig

			_, err := RegisterSpecWithInfo(nsId, &tumblebugSpec)
			if err != nil {
				common.CBLog.Error(err)
				return 0, err
			}
			specCount++
		}
	}
	return specCount, nil
}

// FetchSpecsForAllConnConfigs gets all conn configs from Spider, lookups all specs for each region of conn config, and saves into TB spec objects
func FetchSpecsForAllConnConfigs(nsId string) (connConfigCount uint, specCount uint, err error) {

	err = common.CheckString(nsId)
	if err != nil {
		common.CBLog.Error(err)
		return 0, 0, err
	}

	connConfigs, err := common.GetConnConfigList()
	if err != nil {
		common.CBLog.Error(err)
		return 0, 0, err
	}

	for _, connConfig := range connConfigs.Connectionconfig {
		temp, _ := FetchSpecsForConnConfig(connConfig.ConfigName, nsId)
		specCount += temp
		connConfigCount++
	}
	return connConfigCount, specCount, nil
}

// RegisterSpecWithCspSpecName accepts spec creation request, creates and returns an TB spec object
func RegisterSpecWithCspSpecName(nsId string, u *TbSpecReq) (TbSpecInfo, error) {

	resourceType := common.StrSpec

	err := common.CheckString(nsId)
	if err != nil {
		temp := TbSpecInfo{}
		common.CBLog.Error(err)
		return temp, err
	}
	err = common.CheckString(u.Name)
	if err != nil {
		temp := TbSpecInfo{}
		common.CBLog.Error(err)
		return temp, err
	}
	check, _ := CheckResource(nsId, resourceType, u.Name)

	if check {
		temp := TbSpecInfo{}
		err := fmt.Errorf("The spec " + u.Name + " already exists.")
		return temp, err
	}

	res, err := LookupSpec(u.ConnectionName, u.CspSpecName)
	if err != nil {
		common.CBLog.Error(err)
		err := fmt.Errorf("an error occurred while lookup spec via CB-Spider")
		emptySpecInfoObj := TbSpecInfo{}
		return emptySpecInfoObj, err
	}

	content := TbSpecInfo{}
	content.Namespace = nsId
	//content.Id = common.GenUuid()
	content.Id = u.Name
	content.Name = u.Name
	content.CspSpecName = res.Name
	content.ConnectionName = u.ConnectionName
	content.AssociatedObjectList = []string{}

	tempUint64, _ := strconv.ParseUint(res.VCpu.Count, 10, 16)
	content.Num_vCPU = uint16(tempUint64)

	//content.Num_core = res.Num_core

	tempFloat64, _ := strconv.ParseFloat(res.Mem, 32)
	content.Mem_GiB = uint16(tempFloat64 / 1024)

	//content.Storage_GiB = res.Storage_GiB
	//content.Description = res.Description

	// cb-store
	fmt.Println("=========================== PUT registerSpec")
	Key := common.GenResourceKey(nsId, resourceType, content.Id)
	Val, _ := json.Marshal(content)
	err = common.CBStore.Put(string(Key), string(Val))
	if err != nil {
		common.CBLog.Error(err)
		return content, err
	}
	keyValue, _ := common.CBStore.Get(string(Key))
	fmt.Println("<" + keyValue.Key + "> \n" + keyValue.Value)
	fmt.Println("===========================")

	// register information related with MCIS recommendation
	err = RegisterRecommendList(nsId, content.ConnectionName, content.Num_vCPU, content.Mem_GiB, content.Storage_GiB, content.Id, content.Cost_per_hour)
	if err != nil {
		common.CBLog.Error(err)
		return content, err
	}

	// "INSERT INTO `spec`(`namespace`, `id`, ...) VALUES ('nsId', 'content.Id', ...);
	_, err = common.ORM.Insert(&content)
	if err != nil {
		fmt.Println(err.Error())
	} else {
		fmt.Println("Data inserted successfully..")
	}

	return content, nil
}

// RegisterSpecWithInfo accepts spec creation request, creates and returns an TB spec object
func RegisterSpecWithInfo(nsId string, content *TbSpecInfo) (TbSpecInfo, error) {

	resourceType := common.StrSpec

	err := common.CheckString(nsId)
	if err != nil {
		temp := TbSpecInfo{}
		common.CBLog.Error(err)
		return temp, err
	}
	err = common.CheckString(content.Name)
	if err != nil {
		temp := TbSpecInfo{}
		common.CBLog.Error(err)
		return temp, err
	}
	check, _ := CheckResource(nsId, resourceType, content.Name)

	if check {
		temp := TbSpecInfo{}
		err := fmt.Errorf("The spec " + content.Name + " already exists.")
		return temp, err
	}

	content.Namespace = nsId
	content.Id = content.Name
	content.AssociatedObjectList = []string{}

	// cb-store
	fmt.Println("=========================== PUT registerSpec")
	Key := common.GenResourceKey(nsId, resourceType, content.Id)
	Val, _ := json.Marshal(content)
	err = common.CBStore.Put(string(Key), string(Val))
	if err != nil {
		common.CBLog.Error(err)
		return *content, err
	}
	keyValue, _ := common.CBStore.Get(string(Key))
	fmt.Println("<" + keyValue.Key + "> \n" + keyValue.Value)
	fmt.Println("===========================")

	// register information related with MCIS recommendation
	err = RegisterRecommendList(nsId, content.ConnectionName, content.Num_vCPU, content.Mem_GiB, content.Storage_GiB, content.Id, content.Cost_per_hour)
	if err != nil {
		common.CBLog.Error(err)
		return *content, err
	}

	// "INSERT INTO `spec`(`namespace`, `id`, ...) VALUES ('nsId', 'content.Id', ...);
	_, err = common.ORM.Insert(content)
	if err != nil {
		fmt.Println(err.Error())
	} else {
		fmt.Println("Data inserted successfully..")
	}

	return *content, nil
}

// RegisterRecommendList creates the spec recommendation info
func RegisterRecommendList(nsId string, connectionName string, cpuSize uint16, memSize uint16, diskSize uint32, specId string, price float32) error {

	err := common.CheckString(nsId)
	if err != nil {
		common.CBLog.Error(err)
		return err
	}

	//fmt.Println("[Get MCISs")
	key := common.GenMcisKey(nsId, "", "") + "/cpuSize/" + strconv.Itoa(int(cpuSize)) + "/memSize/" + strconv.Itoa(int(memSize)) + "/diskSize/" + strconv.Itoa(int(diskSize)) + "/specId/" + specId
	fmt.Println(key)

	mapA := map[string]string{"id": specId, "price": fmt.Sprintf("%.6f", price), "connectionName": connectionName}
	Val, _ := json.Marshal(mapA)

	err = common.CBStore.Put(string(key), string(Val))
	if err != nil {
		common.CBLog.Error(err)
		return err
	}

	fmt.Println("===============================================")
	return nil

}

// DelRecommendSpec deletes the spec recommendation info
func DelRecommendSpec(nsId string, specId string, cpuSize uint16, memSize uint16, diskSize uint32) error {

	err := common.CheckString(nsId)
	if err != nil {
		common.CBLog.Error(err)
		return err
	}

	fmt.Println("DelRecommendSpec()")

	key := common.GenMcisKey(nsId, "", "") + "/cpuSize/" + strconv.Itoa(int(cpuSize)) + "/memSize/" + strconv.Itoa(int(memSize)) + "/diskSize/" + strconv.Itoa(int(diskSize)) + "/specId/" + specId

	err = common.CBStore.Delete(key)
	if err != nil {
		common.CBLog.Error(err)
		return err
	}

	return nil

}

// FilterSpecs accepts criteria for filtering, and returns the list of filtered TB spec objects
func FilterSpecs(nsId string, filter TbSpecInfo) ([]TbSpecInfo, error) {

	err := common.CheckString(nsId)
	if err != nil {
		common.CBLog.Error(err)
		return nil, err
	}

	tempList := []TbSpecInfo{}

	//sqlQuery := "SELECT * FROM `spec` WHERE `namespace`='" + nsId + "'"
	sqlQuery := common.ORM.Where("Namespace = ?", nsId)

	if filter.Id != "" {
		//sqlQuery += " AND `id` LIKE '%" + filter.Id + "%'"
		filter.Id = RefineSpecName(filter.Id)
		sqlQuery = sqlQuery.And("Id LIKE ?", "%"+filter.Id+"%")
	}
	if filter.Name != "" {
		//sqlQuery += " AND `name` LIKE '%" + filter.Name + "%'"
		filter.Name = RefineSpecName(filter.Name)
		sqlQuery = sqlQuery.And("Name LIKE ?", "%"+filter.Name+"%")
	}
	if filter.ConnectionName != "" {
		//sqlQuery += " AND `connectionName` LIKE '%" + filter.ConnectionName + "%'"
		filter.ConnectionName = RefineSpecName(filter.ConnectionName)
		sqlQuery = sqlQuery.And("ConnectionName LIKE ?", "%"+filter.ConnectionName+"%")
	}
	if filter.CspSpecName != "" {
		//sqlQuery += " AND `cspSpecName` LIKE '%" + filter.CspSpecName + "%'"
		filter.CspSpecName = RefineSpecName(filter.CspSpecName)
		sqlQuery = sqlQuery.And("CspSpecName LIKE ?", "%"+filter.CspSpecName+"%")
	}
	if filter.Os_type != "" {
		//sqlQuery += " AND `os_type` LIKE '%" + filter.Os_type + "%'"
		filter.Os_type = RefineSpecName(filter.Os_type)
		sqlQuery = sqlQuery.And("Os_type LIKE ?", "%"+filter.Os_type+"%")
	}

	if filter.Num_vCPU > 0 {
		//sqlQuery += " AND `num_vCPU`=" + strconv.Itoa(int(filter.Num_vCPU))
		sqlQuery = sqlQuery.And("Num_vCPU = ?", filter.Num_vCPU)
	}
	if filter.Num_core > 0 {
		//sqlQuery += " AND `num_core`=" + strconv.Itoa(int(filter.Num_core))
		sqlQuery = sqlQuery.And("Num_core = ?", filter.Num_core)
	}
	if filter.Mem_GiB > 0 {
		//sqlQuery += " AND `mem_GiB`=" + strconv.Itoa(int(filter.Mem_GiB))
		sqlQuery = sqlQuery.And("Mem_GiB = ?", filter.Mem_GiB)
	}
	if filter.Storage_GiB > 0 {
		//sqlQuery += " AND `storage_GiB`=" + strconv.Itoa(int(filter.Storage_GiB))
		sqlQuery = sqlQuery.And("Storage_GiB = ?", filter.Storage_GiB)
	}
	if filter.Description != "" {
		//sqlQuery += " AND `description` LIKE '%" + filter.Description + "%'"
		filter.Description = RefineSpecName(filter.Description)
		sqlQuery = sqlQuery.And("Description LIKE ?", "%"+filter.Description+"%")
	}
	if filter.Cost_per_hour > 0 {
		//sqlQuery += " AND `cost_per_hour`=" + fmt.Sprintf("%.6f", filter.Cost_per_hour)
		sqlQuery = sqlQuery.And("Cost_per_hour = ?", filter.Cost_per_hour)
	}
	if filter.Num_storage > 0 {
		//sqlQuery += " AND `num_storage`=" + strconv.Itoa(int(filter.Num_storage))
		sqlQuery = sqlQuery.And("Num_storage = ?", filter.Num_storage)
	}
	if filter.Max_num_storage > 0 {
		//sqlQuery += " AND `max_num_storage`=" + strconv.Itoa(int(filter.Max_num_storage))
		sqlQuery = sqlQuery.And("Max_num_storage = ?", filter.Max_num_storage)
	}
	if filter.Max_total_storage_TiB > 0 {
		//sqlQuery += " AND `max_total_storage_TiB`=" + strconv.Itoa(int(filter.Max_total_storage_TiB))
		sqlQuery = sqlQuery.And("Max_total_storage_TiB = ?", filter.Max_total_storage_TiB)
	}
	if filter.Net_bw_Gbps > 0 {
		//sqlQuery += " AND `net_bw_Gbps`=" + strconv.Itoa(int(filter.Net_bw_Gbps))
		sqlQuery = sqlQuery.And("Net_bw_Gbps = ?", filter.Net_bw_Gbps)
	}
	if filter.Ebs_bw_Mbps > 0 {
		//sqlQuery += " AND `ebs_bw_Mbps`=" + strconv.Itoa(int(filter.Ebs_bw_Mbps))
		sqlQuery = sqlQuery.And("Ebs_bw_Mbps = ?", filter.Ebs_bw_Mbps)
	}
	if filter.Gpu_model != "" {
		//sqlQuery += " AND `gpu_model` LIKE '%" + filter.Gpu_model + "%'"
		filter.Gpu_model = RefineSpecName(filter.Gpu_model)
		sqlQuery = sqlQuery.And("Gpu_model LIKE ?", "%"+filter.Gpu_model+"%")
	}
	if filter.Num_gpu > 0 {
		//sqlQuery += " AND `num_gpu`=" + strconv.Itoa(int(filter.Num_gpu))
		sqlQuery = sqlQuery.And("Num_gpu = ?", filter.Num_gpu)
	}
	if filter.Gpumem_GiB > 0 {
		//sqlQuery += " AND `gpumem_GiB`=" + strconv.Itoa(int(filter.Gpumem_GiB))
		sqlQuery = sqlQuery.And("Gpumem_GiB = ?", filter.Gpumem_GiB)
	}
	if filter.Gpu_p2p != "" {
		//sqlQuery += " AND `gpu_p2p` LIKE '%" + filter.Gpu_p2p + "%'"
		filter.Gpu_p2p = RefineSpecName(filter.Gpu_p2p)
		sqlQuery = sqlQuery.And("Gpu_p2p LIKE ?", "%"+filter.Gpu_p2p+"%")
	}
	if filter.EvaluationStatus != "" {
		//sqlQuery += " AND `evaluationStatus` LIKE '%" + filter.EvaluationStatus + "%'"
		filter.EvaluationStatus = RefineSpecName(filter.EvaluationStatus)
		sqlQuery = sqlQuery.And("EvaluationStatus LIKE ?", "%"+filter.EvaluationStatus+"%")
	}
	if filter.EvaluationScore_01 > 0 {
		//sqlQuery += " AND `evaluationScore_01`=" + fmt.Sprintf("%.6f", filter.EvaluationScore_01)
		sqlQuery = sqlQuery.And("EvaluationScore_01 = ?", filter.EvaluationScore_01)
	}
	if filter.EvaluationScore_02 > 0 {
		//sqlQuery += " AND `evaluationScore_02`=" + fmt.Sprintf("%.6f", filter.EvaluationScore_02)
		sqlQuery = sqlQuery.And("EvaluationScore_02 = ?", filter.EvaluationScore_02)
	}
	if filter.EvaluationScore_03 > 0 {
		//sqlQuery += " AND `evaluationScore_03`=" + fmt.Sprintf("%.6f", filter.EvaluationScore_03)
		sqlQuery = sqlQuery.And("EvaluationScore_03 = ?", filter.EvaluationScore_03)
	}
	if filter.EvaluationScore_04 > 0 {
		//sqlQuery += " AND `evaluationScore_04`=" + fmt.Sprintf("%.6f", filter.EvaluationScore_04)
		sqlQuery = sqlQuery.And("EvaluationScore_04 = ?", filter.EvaluationScore_04)
	}
	if filter.EvaluationScore_05 > 0 {
		//sqlQuery += " AND `evaluationScore_05`=" + fmt.Sprintf("%.6f", filter.EvaluationScore_05)
		sqlQuery = sqlQuery.And("EvaluationScore_05 = ?", filter.EvaluationScore_05)
	}
	if filter.EvaluationScore_06 > 0 {
		//sqlQuery += " AND `evaluationScore_06`=" + fmt.Sprintf("%.6f", filter.EvaluationScore_06)
		sqlQuery = sqlQuery.And("EvaluationScore_06 = ?", filter.EvaluationScore_06)
	}
	if filter.EvaluationScore_07 > 0 {
		//sqlQuery += " AND `evaluationScore_07`=" + fmt.Sprintf("%.6f", filter.EvaluationScore_07)
		sqlQuery = sqlQuery.And("EvaluationScore_07 = ?", filter.EvaluationScore_07)
	}
	if filter.EvaluationScore_08 > 0 {
		//sqlQuery += " AND `evaluationScore_08`=" + fmt.Sprintf("%.6f", filter.EvaluationScore_08)
		sqlQuery = sqlQuery.And("EvaluationScore_08 = ?", filter.EvaluationScore_08)
	}
	if filter.EvaluationScore_09 > 0 {
		//sqlQuery += " AND `evaluationScore_09`=" + fmt.Sprintf("%.6f", filter.EvaluationScore_09)
		sqlQuery = sqlQuery.And("EvaluationScore_09 = ?", filter.EvaluationScore_09)
	}
	if filter.EvaluationScore_10 > 0 {
		//sqlQuery += " AND `evaluationScore_10`=" + fmt.Sprintf("%.6f", filter.EvaluationScore_10)
		sqlQuery = sqlQuery.And("EvaluationScore_10 = ?", filter.EvaluationScore_10)
	}

	err = sqlQuery.Find(&tempList)
	if err != nil {
		common.CBLog.Error(err)
		return tempList, err
	}
	return tempList, nil
}

type Range struct {
	Min float32 `json:"min"`
	Max float32 `json:"max"`
}

type FilterSpecsByRangeRequest struct {
	Id                    string `json:"id"`
	Name                  string `json:"name"`
	ConnectionName        string `json:"connectionName"`
	CspSpecName           string `json:"cspSpecName"`
	Os_type               string `json:"os_type"`
	Num_vCPU              Range  `json:"num_vCPU"`
	Num_core              Range  `json:"num_core"`
	Mem_GiB               Range  `json:"mem_GiB"`
	Storage_GiB           Range  `json:"storage_GiB"`
	Description           string `json:"description"`
	Cost_per_hour         Range  `json:"cost_per_hour"`
	Num_storage           Range  `json:"num_storage"`
	Max_num_storage       Range  `json:"max_num_storage"`
	Max_total_storage_TiB Range  `json:"max_total_storage_TiB"`
	Net_bw_Gbps           Range  `json:"net_bw_Gbps"`
	Ebs_bw_Mbps           Range  `json:"ebs_bw_Mbps"`
	Gpu_model             string `json:"gpu_model"`
	Num_gpu               Range  `json:"num_gpu"`
	Gpumem_GiB            Range  `json:"gpumem_GiB"`
	Gpu_p2p               string `json:"gpu_p2p"`
	EvaluationStatus      string `json:"evaluationStatus"`
	EvaluationScore_01    Range  `json:"evaluationScore_01"`
	EvaluationScore_02    Range  `json:"evaluationScore_02"`
	EvaluationScore_03    Range  `json:"evaluationScore_03"`
	EvaluationScore_04    Range  `json:"evaluationScore_04"`
	EvaluationScore_05    Range  `json:"evaluationScore_05"`
	EvaluationScore_06    Range  `json:"evaluationScore_06"`
	EvaluationScore_07    Range  `json:"evaluationScore_07"`
	EvaluationScore_08    Range  `json:"evaluationScore_08"`
	EvaluationScore_09    Range  `json:"evaluationScore_09"`
	EvaluationScore_10    Range  `json:"evaluationScore_10"`
}

// FilterSpecsByRange accepts criteria ranges for filtering, and returns the list of filtered TB spec objects
func FilterSpecsByRange(nsId string, filter FilterSpecsByRangeRequest) ([]TbSpecInfo, error) {

	err := common.CheckString(nsId)
	if err != nil {
		common.CBLog.Error(err)
		return nil, err
	}

	tempList := []TbSpecInfo{}

	//sqlQuery := "SELECT * FROM `spec` WHERE `namespace`='" + nsId + "'"
	sqlQuery := common.ORM.Where("Namespace = ?", nsId)

	if filter.Id != "" {
		//sqlQuery += " AND `id` LIKE '%" + filter.Id + "%'"
		filter.Id = RefineSpecName(filter.Id)
		sqlQuery = sqlQuery.And("Id LIKE ?", "%"+filter.Id+"%")
	}
	if filter.Name != "" {
		//sqlQuery += " AND `name` LIKE '%" + filter.Name + "%'"
		filter.Name = RefineSpecName(filter.Name)
		sqlQuery = sqlQuery.And("Name LIKE ?", "%"+filter.Name+"%")
	}
	if filter.ConnectionName != "" {
		//sqlQuery += " AND `connectionName` LIKE '%" + filter.ConnectionName + "%'"
		filter.ConnectionName = RefineSpecName(filter.ConnectionName)
		sqlQuery = sqlQuery.And("ConnectionName LIKE ?", "%"+filter.ConnectionName+"%")
	}
	if filter.CspSpecName != "" {
		//sqlQuery += " AND `cspSpecName` LIKE '%" + filter.CspSpecName + "%'"
		filter.CspSpecName = RefineSpecName(filter.CspSpecName)
		sqlQuery = sqlQuery.And("CspSpecName LIKE ?", "%"+filter.CspSpecName+"%")
	}
	if filter.Os_type != "" {
		//sqlQuery += " AND `os_type` LIKE '%" + filter.Os_type + "%'"
		filter.Os_type = RefineSpecName(filter.Os_type)
		sqlQuery = sqlQuery.And("Os_type LIKE ?", "%"+filter.Os_type+"%")
	}

	if filter.Num_vCPU.Min > 0 {
		//sqlQuery += " AND `num_vCPU`>=" + fmt.Sprintf("%.6f", filter.Num_vCPU.Min)
		sqlQuery = sqlQuery.And("Num_vCPU >= ?", filter.Num_vCPU.Min)
	}
	if filter.Num_vCPU.Max > 0 {
		//sqlQuery += " AND `num_vCPU`<=" + fmt.Sprintf("%.6f", filter.Num_vCPU.Max)
		sqlQuery = sqlQuery.And("Num_vCPU <= ?", filter.Num_vCPU.Max)
	}

	if filter.Num_core.Min > 0 {
		//sqlQuery += " AND `num_core`>=" + fmt.Sprintf("%.6f", filter.Num_core.Min)
		sqlQuery = sqlQuery.And("Num_core >= ?", filter.Num_core.Min)
	}
	if filter.Num_core.Max > 0 {
		//sqlQuery += " AND `num_core`<=" + fmt.Sprintf("%.6f", filter.Num_core.Max)
		sqlQuery = sqlQuery.And("Num_core <= ?", filter.Num_core.Max)
	}

	if filter.Mem_GiB.Min > 0 {
		//sqlQuery += " AND `mem_GiB`>=" + fmt.Sprintf("%.6f", filter.Mem_GiB.Min)
		sqlQuery = sqlQuery.And("Mem_GiB >= ?", filter.Mem_GiB.Min)
	}
	if filter.Mem_GiB.Max > 0 {
		//sqlQuery += " AND `mem_GiB`<=" + fmt.Sprintf("%.6f", filter.Mem_GiB.Max)
		sqlQuery = sqlQuery.And("Mem_GiB <= ?", filter.Mem_GiB.Max)
	}

	if filter.Storage_GiB.Min > 0 {
		//sqlQuery += " AND `storage_GiB`>=" + fmt.Sprintf("%.6f", filter.Storage_GiB.Min)
		sqlQuery = sqlQuery.And("Storage_GiB >= ?", filter.Storage_GiB.Min)
	}
	if filter.Storage_GiB.Max > 0 {
		//sqlQuery += " AND `storage_GiB`<=" + fmt.Sprintf("%.6f", filter.Storage_GiB.Max)
		sqlQuery = sqlQuery.And("Storage_GiB <= ?", filter.Storage_GiB.Max)
	}

	if filter.Description != "" {
		//sqlQuery += " AND `description` LIKE '%" + filter.Description + "%'"
		filter.Description = RefineSpecName(filter.Description)
		sqlQuery = sqlQuery.And("Description LIKE ?", "%"+filter.Description+"%")
	}

	if filter.Cost_per_hour.Min > 0 {
		//sqlQuery += " AND `cost_per_hour`>=" + fmt.Sprintf("%.6f", filter.Cost_per_hour.Min)
		sqlQuery = sqlQuery.And("Cost_per_hour >= ?", filter.Cost_per_hour.Min)
	}
	if filter.Cost_per_hour.Max > 0 {
		//sqlQuery += " AND `cost_per_hour`<=" + fmt.Sprintf("%.6f", filter.Cost_per_hour.Max)
		sqlQuery = sqlQuery.And("Cost_per_hour <= ?", filter.Cost_per_hour.Max)
	}

	if filter.Num_storage.Min > 0 {
		//sqlQuery += " AND `num_storage`>=" + fmt.Sprintf("%.6f", filter.Num_storage.Min)
		sqlQuery = sqlQuery.And("Num_storage >= ?", filter.Num_storage.Min)
	}
	if filter.Num_storage.Max > 0 {
		//sqlQuery += " AND `num_storage`<=" + fmt.Sprintf("%.6f", filter.Num_storage.Max)
		sqlQuery = sqlQuery.And("Num_storage <= ?", filter.Num_storage.Max)
	}

	if filter.Max_num_storage.Min > 0 {
		//sqlQuery += " AND `max_num_storage`>=" + fmt.Sprintf("%.6f", filter.Max_num_storage.Min)
		sqlQuery = sqlQuery.And("Max_num_storage >= ?", filter.Max_num_storage.Min)
	}
	if filter.Max_num_storage.Max > 0 {
		//sqlQuery += " AND `max_num_storage`<=" + fmt.Sprintf("%.6f", filter.Max_num_storage.Max)
		sqlQuery = sqlQuery.And("Max_num_storage <= ?", filter.Max_num_storage.Max)
	}

	if filter.Max_total_storage_TiB.Min > 0 {
		//sqlQuery += " AND `max_total_storage_TiB`>=" + fmt.Sprintf("%.6f", filter.Max_total_storage_TiB.Min)
		sqlQuery = sqlQuery.And("Max_total_storage_TiB >= ?", filter.Max_total_storage_TiB.Min)
	}
	if filter.Max_total_storage_TiB.Max > 0 {
		//sqlQuery += " AND `max_total_storage_TiB`<=" + fmt.Sprintf("%.6f", filter.Max_total_storage_TiB.Max)
		sqlQuery = sqlQuery.And("Max_total_storage_TiB <= ?", filter.Max_total_storage_TiB.Max)
	}

	if filter.Net_bw_Gbps.Min > 0 {
		//sqlQuery += " AND `net_bw_Gbps`>=" + fmt.Sprintf("%.6f", filter.Net_bw_Gbps.Min)
		sqlQuery = sqlQuery.And("Net_bw_Gbps >= ?", filter.Net_bw_Gbps.Min)
	}
	if filter.Net_bw_Gbps.Max > 0 {
		//sqlQuery += " AND `net_bw_Gbps`<=" + fmt.Sprintf("%.6f", filter.Net_bw_Gbps.Max)
		sqlQuery = sqlQuery.And("Net_bw_Gbps <= ?", filter.Net_bw_Gbps.Max)
	}

	if filter.Ebs_bw_Mbps.Min > 0 {
		//sqlQuery += " AND `ebs_bw_Mbps`>=" + fmt.Sprintf("%.6f", filter.Ebs_bw_Mbps.Min)
		sqlQuery = sqlQuery.And("Ebs_bw_Mbps >= ?", filter.Ebs_bw_Mbps.Min)
	}
	if filter.Ebs_bw_Mbps.Max > 0 {
		//sqlQuery += " AND `ebs_bw_Mbps`<=" + fmt.Sprintf("%.6f", filter.Ebs_bw_Mbps.Max)
		sqlQuery = sqlQuery.And("Ebs_bw_Mbps <= ?", filter.Ebs_bw_Mbps.Max)
	}

	if filter.Gpu_model != "" {
		//sqlQuery += " AND `gpu_model` LIKE '%" + filter.Gpu_model + "%'"
		filter.Gpu_model = RefineSpecName(filter.Gpu_model)
		sqlQuery = sqlQuery.And("Gpu_model LIKE ?", "%"+filter.Gpu_model+"%")
	}

	if filter.Num_gpu.Min > 0 {
		//sqlQuery += " AND `num_gpu`>=" + fmt.Sprintf("%.6f", filter.Num_gpu.Min)
		sqlQuery = sqlQuery.And("Num_gpu >= ?", filter.Num_gpu.Min)
	}
	if filter.Num_gpu.Max > 0 {
		//sqlQuery += " AND `num_gpu`<=" + fmt.Sprintf("%.6f", filter.Num_gpu.Max)
		sqlQuery = sqlQuery.And("Num_gpu <= ?", filter.Num_gpu.Max)
	}

	if filter.Gpumem_GiB.Min > 0 {
		//sqlQuery += " AND `gpumem_GiB`>=" + fmt.Sprintf("%.6f", filter.Gpumem_GiB.Min)
		sqlQuery = sqlQuery.And("Gpumem_GiB >= ?", filter.Gpumem_GiB.Min)
	}
	if filter.Gpumem_GiB.Max > 0 {
		//sqlQuery += " AND `gpumem_GiB`<=" + fmt.Sprintf("%.6f", filter.Gpumem_GiB.Max)
		sqlQuery = sqlQuery.And("Gpumem_GiB <= ?", filter.Gpumem_GiB.Max)
	}

	if filter.Gpu_p2p != "" {
		//sqlQuery += " AND `gpu_p2p` LIKE '%" + filter.Gpu_p2p + "%'"
		filter.Gpu_p2p = RefineSpecName(filter.Gpu_p2p)
		sqlQuery = sqlQuery.And("Gpu_p2p LIKE ?", "%"+filter.Gpu_p2p+"%")
	}
	if filter.EvaluationStatus != "" {
		//sqlQuery += " AND `evaluationStatus` LIKE '%" + filter.EvaluationStatus + "%'"
		filter.EvaluationStatus = RefineSpecName(filter.EvaluationStatus)
		sqlQuery = sqlQuery.And("EvaluationStatus LIKE ?", "%"+filter.EvaluationStatus+"%")
	}

	if filter.EvaluationScore_01.Min > 0 {
		//sqlQuery += " AND `evaluationScore_01`>=" + fmt.Sprintf("%.6f", filter.EvaluationScore_01.Min)
		sqlQuery = sqlQuery.And("EvaluationScore_01 >= ?", filter.EvaluationScore_01.Min)
	}
	if filter.EvaluationScore_01.Max > 0 {
		//sqlQuery += " AND `evaluationScore_01`<=" + fmt.Sprintf("%.6f", filter.EvaluationScore_01.Max)
		sqlQuery = sqlQuery.And("EvaluationScore_01 <= ?", filter.EvaluationScore_01.Max)
	}

	if filter.EvaluationScore_02.Min > 0 {
		//sqlQuery += " AND `evaluationScore_02`>=" + fmt.Sprintf("%.6f", filter.EvaluationScore_02.Min)
		sqlQuery = sqlQuery.And("EvaluationScore_02 >= ?", filter.EvaluationScore_02.Min)
	}
	if filter.EvaluationScore_02.Max > 0 {
		//sqlQuery += " AND `evaluationScore_02`<=" + fmt.Sprintf("%.6f", filter.EvaluationScore_02.Max)
		sqlQuery = sqlQuery.And("EvaluationScore_02 <= ?", filter.EvaluationScore_02.Max)
	}

	if filter.EvaluationScore_03.Min > 0 {
		//sqlQuery += " AND `evaluationScore_03`>=" + fmt.Sprintf("%.6f", filter.EvaluationScore_03.Min)
		sqlQuery = sqlQuery.And("EvaluationScore_03 >= ?", filter.EvaluationScore_03.Min)
	}
	if filter.EvaluationScore_03.Max > 0 {
		//sqlQuery += " AND `evaluationScore_03`<=" + fmt.Sprintf("%.6f", filter.EvaluationScore_03.Max)
		sqlQuery = sqlQuery.And("EvaluationScore_03 <= ?", filter.EvaluationScore_03.Max)
	}

	if filter.EvaluationScore_04.Min > 0 {
		//sqlQuery += " AND `evaluationScore_04`>=" + fmt.Sprintf("%.6f", filter.EvaluationScore_04.Min)
		sqlQuery = sqlQuery.And("EvaluationScore_04 >= ?", filter.EvaluationScore_04.Min)
	}
	if filter.EvaluationScore_04.Max > 0 {
		//sqlQuery += " AND `evaluationScore_04`<=" + fmt.Sprintf("%.6f", filter.EvaluationScore_04.Max)
		sqlQuery = sqlQuery.And("EvaluationScore_04 <= ?", filter.EvaluationScore_04.Max)
	}

	if filter.EvaluationScore_05.Min > 0 {
		//sqlQuery += " AND `evaluationScore_05`>=" + fmt.Sprintf("%.6f", filter.EvaluationScore_05.Min)
		sqlQuery = sqlQuery.And("EvaluationScore_05 >= ?", filter.EvaluationScore_05.Min)
	}
	if filter.EvaluationScore_05.Max > 0 {
		//sqlQuery += " AND `evaluationScore_05`<=" + fmt.Sprintf("%.6f", filter.EvaluationScore_05.Max)
		sqlQuery = sqlQuery.And("EvaluationScore_05 <= ?", filter.EvaluationScore_05.Max)
	}

	if filter.EvaluationScore_06.Min > 0 {
		//sqlQuery += " AND `evaluationScore_06`>=" + fmt.Sprintf("%.6f", filter.EvaluationScore_06.Min)
		sqlQuery = sqlQuery.And("EvaluationScore_06 >= ?", filter.EvaluationScore_06.Min)
	}
	if filter.EvaluationScore_06.Max > 0 {
		//sqlQuery += " AND `evaluationScore_06`<=" + fmt.Sprintf("%.6f", filter.EvaluationScore_06.Max)
		sqlQuery = sqlQuery.And("EvaluationScore_06 <= ?", filter.EvaluationScore_06.Max)
	}

	if filter.EvaluationScore_07.Min > 0 {
		//sqlQuery += " AND `evaluationScore_07`>=" + fmt.Sprintf("%.6f", filter.EvaluationScore_07.Min)
		sqlQuery = sqlQuery.And("EvaluationScore_07 >= ?", filter.EvaluationScore_07.Min)
	}
	if filter.EvaluationScore_07.Max > 0 {
		//sqlQuery += " AND `evaluationScore_07`<=" + fmt.Sprintf("%.6f", filter.EvaluationScore_07.Max)
		sqlQuery = sqlQuery.And("EvaluationScore_07 <= ?", filter.EvaluationScore_07.Max)
	}

	if filter.EvaluationScore_08.Min > 0 {
		//sqlQuery += " AND `evaluationScore_08`>=" + fmt.Sprintf("%.6f", filter.EvaluationScore_08.Min)
		sqlQuery = sqlQuery.And("EvaluationScore_08 >= ?", filter.EvaluationScore_08.Min)
	}
	if filter.EvaluationScore_08.Max > 0 {
		//sqlQuery += " AND `evaluationScore_08`<=" + fmt.Sprintf("%.6f", filter.EvaluationScore_08.Max)
		sqlQuery = sqlQuery.And("EvaluationScore_08 <= ?", filter.EvaluationScore_08.Max)
	}

	if filter.EvaluationScore_09.Min > 0 {
		//sqlQuery += " AND `evaluationScore_09`>=" + fmt.Sprintf("%.6f", filter.EvaluationScore_09.Min)
		sqlQuery = sqlQuery.And("EvaluationScore_09 >= ?", filter.EvaluationScore_09.Min)
	}
	if filter.EvaluationScore_09.Max > 0 {
		//sqlQuery += " AND `evaluationScore_09`<=" + fmt.Sprintf("%.6f", filter.EvaluationScore_09.Max)
		sqlQuery = sqlQuery.And("EvaluationScore_09 <= ?", filter.EvaluationScore_09.Max)
	}

	if filter.EvaluationScore_10.Min > 0 {
		//sqlQuery += " AND `evaluationScore_10`>=" + fmt.Sprintf("%.6f", filter.EvaluationScore_10.Min)
		sqlQuery = sqlQuery.And("EvaluationScore_10 >= ?", filter.EvaluationScore_10.Min)
	}
	if filter.EvaluationScore_10.Max > 0 {
		//sqlQuery += " AND `evaluationScore_10`<=" + fmt.Sprintf("%.6f", filter.EvaluationScore_10.Max)
		sqlQuery = sqlQuery.And("EvaluationScore_10 <= ?", filter.EvaluationScore_10.Max)
	}

	err = sqlQuery.Find(&tempList)
	if err != nil {
		common.CBLog.Error(err)
		return tempList, err
	}

	return tempList, nil
}

// SortSpecs accepts the list of TB spec objects, criteria and sorting direction,
// sorts and returns the sorted list of TB spec objects
func SortSpecs(specList []TbSpecInfo, orderBy string, direction string) ([]TbSpecInfo, error) {
	var err error = nil

	sort.Slice(specList, func(i, j int) bool {
		if orderBy == "num_vCPU" {
			if direction == "descending" {
				return specList[i].Num_vCPU > specList[j].Num_vCPU
			} else if direction == "ascending" {
				return specList[i].Num_vCPU < specList[j].Num_vCPU
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "mem_GiB" {
			if direction == "descending" {
				return specList[i].Mem_GiB > specList[j].Mem_GiB
			} else if direction == "ascending" {
				return specList[i].Mem_GiB < specList[j].Mem_GiB
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "storage_GiB" {
			if direction == "descending" {
				return specList[i].Storage_GiB > specList[j].Storage_GiB
			} else if direction == "ascending" {
				return specList[i].Storage_GiB < specList[j].Storage_GiB
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "evaluationScore_01" {
			if direction == "descending" {
				return specList[i].EvaluationScore_01 > specList[j].EvaluationScore_01
			} else if direction == "ascending" {
				return specList[i].EvaluationScore_01 < specList[j].EvaluationScore_01
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "evaluationScore_02" {
			if direction == "descending" {
				return specList[i].EvaluationScore_02 > specList[j].EvaluationScore_02
			} else if direction == "ascending" {
				return specList[i].EvaluationScore_02 < specList[j].EvaluationScore_02
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "evaluationScore_03" {
			if direction == "descending" {
				return specList[i].EvaluationScore_03 > specList[j].EvaluationScore_03
			} else if direction == "ascending" {
				return specList[i].EvaluationScore_03 < specList[j].EvaluationScore_03
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "evaluationScore_04" {
			if direction == "descending" {
				return specList[i].EvaluationScore_04 > specList[j].EvaluationScore_04
			} else if direction == "ascending" {
				return specList[i].EvaluationScore_04 < specList[j].EvaluationScore_04
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "evaluationScore_05" {
			if direction == "descending" {
				return specList[i].EvaluationScore_05 > specList[j].EvaluationScore_05
			} else if direction == "ascending" {
				return specList[i].EvaluationScore_05 < specList[j].EvaluationScore_05
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "evaluationScore_06" {
			if direction == "descending" {
				return specList[i].EvaluationScore_06 > specList[j].EvaluationScore_06
			} else if direction == "ascending" {
				return specList[i].EvaluationScore_06 < specList[j].EvaluationScore_06
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "evaluationScore_07" {
			if direction == "descending" {
				return specList[i].EvaluationScore_07 > specList[j].EvaluationScore_07
			} else if direction == "ascending" {
				return specList[i].EvaluationScore_07 < specList[j].EvaluationScore_07
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "evaluationScore_08" {
			if direction == "descending" {
				return specList[i].EvaluationScore_08 > specList[j].EvaluationScore_08
			} else if direction == "ascending" {
				return specList[i].EvaluationScore_08 < specList[j].EvaluationScore_08
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "evaluationScore_09" {
			if direction == "descending" {
				return specList[i].EvaluationScore_09 > specList[j].EvaluationScore_09
			} else if direction == "ascending" {
				return specList[i].EvaluationScore_09 < specList[j].EvaluationScore_09
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else if orderBy == "evaluationScore_10" {
			if direction == "descending" {
				return specList[i].EvaluationScore_10 > specList[j].EvaluationScore_10
			} else if direction == "ascending" {
				return specList[i].EvaluationScore_10 < specList[j].EvaluationScore_10
			} else {
				err = fmt.Errorf("'direction' should one of these: ascending, descending")
				return true
			}
		} else {
			err = fmt.Errorf("'orderBy' should one of these: num_vCPU, mem_GiB, storage_GiB")
			return true
		}
	})

	for i := range specList {
		specList[i].OrderInFilteredResult = uint16(i + 1)
	}

	return specList, err
}

// UpdateSpec accepts to-be TB spec objects,
// updates and returns the updated TB spec objects
func UpdateSpec(nsId string, newSpec TbSpecInfo) (TbSpecInfo, error) {
	resourceType := common.StrSpec

	err := common.CheckString(nsId)
	if err != nil {
		temp := TbSpecInfo{}
		common.CBLog.Error(err)
		return temp, err
	}
	err = common.CheckString(newSpec.Id)
	if err != nil {
		temp := TbSpecInfo{}
		common.CBLog.Error(err)
		return temp, err
	}
	check, _ := CheckResource(nsId, resourceType, newSpec.Id)

	if !check {
		temp := TbSpecInfo{}
		err := fmt.Errorf("The spec " + newSpec.Id + " does not exist.")
		return temp, err
	}

	tempInterface, err := GetResource(nsId, resourceType, newSpec.Id)
	if err != nil {
		temp := TbSpecInfo{}
		err := fmt.Errorf("Failed to get the spec " + newSpec.Id + ".")
		return temp, err
	}
	tempSpec := TbSpecInfo{}
	err = common.CopySrcToDest(&tempInterface, &tempSpec)
	if err != nil {
		temp := TbSpecInfo{}
		err := fmt.Errorf("Failed to CopySrcToDest() " + newSpec.Id + ".")
		return temp, err
	}

	// cb-store
	fmt.Println("=========================== PUT registerSpec")
	Key := common.GenResourceKey(nsId, resourceType, tempSpec.Id)
	Val, _ := json.Marshal(tempSpec)
	err = common.CBStore.Put(string(Key), string(Val))
	if err != nil {
		temp := TbSpecInfo{}
		common.CBLog.Error(err)
		return temp, err
	}
	keyValue, _ := common.CBStore.Get(string(Key))
	fmt.Println("<" + keyValue.Key + "> \n" + keyValue.Value)
	fmt.Println("===========================")

	// register information related with MCIS recommendation
	err = RegisterRecommendList(nsId, tempSpec.ConnectionName, tempSpec.Num_vCPU, tempSpec.Mem_GiB, tempSpec.Storage_GiB, tempSpec.Id, tempSpec.Cost_per_hour)
	if err != nil {
		common.CBLog.Error(err)
		return tempSpec, err
	}

	// "UPDATE `spec` SET `id`='" + newSpec.Id + "', ... WHERE `namespace`='" + nsId + "' AND `id`='" + newSpec.Id + "';"
	_, err = common.ORM.Update(&newSpec, &TbSpecInfo{Namespace: nsId, Id: newSpec.Id})
	if err != nil {
		fmt.Println(err.Error())
	} else {
		fmt.Println("Data inserted successfully..")
	}

	return tempSpec, nil
}
